from aiogram import Router, types
from aiogram.enums import ParseMode
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from my_escape_function import escape_for_telegram
import database

router = Router()


# ================================
# 1. –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
# ================================
class RegStates(StatesGroup):
    role = State()  # –≤—ã–±–æ—Ä —Ä–æ–ª–∏: student/teacher
    # —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    group_select = State()  # –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –ø–æ ID –∏–∑ —Å–ø–∏—Å–∫–∞
    subgroup = State()  # –≤—ã–±–æ—Ä –ø–æ–¥–≥—Ä—É–ø–ø—ã (1 –∏–ª–∏ 2)
    first_name = State()  # –≤–≤–æ–¥/–ø—Ä–æ–ø—É—Å–∫ –∏–º–µ–Ω–∏
    last_name = State()  # –≤–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏
    # —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    t_first_name = State()  # –≤–≤–æ–¥/–ø—Ä–æ–ø—É—Å–∫ –∏–º–µ–Ω–∏
    t_last_name = State()  # –≤–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏


# ================================
# 2. –°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
# ================================
@router.message(Command("register"))
async def cmd_register(message: types.Message, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å.
    """
    await state.clear()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if await database.user_exists(message.from_user.id, database.users_db_file):
        await message.answer(escape_for_telegram("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!"))
        return

    # –°—Ç—Ä–æ–∏–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏: —Å—Ç—É–¥–µ–Ω—Ç / –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    kb = InlineKeyboardBuilder()
    kb.button(text="üë©‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç", callback_data="reg:student")
    kb.button(text="üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="reg:teacher")
    kb.adjust(2)

    await message.answer(
        "*–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=kb.as_markup()
    )
    await state.set_state(RegStates.role)


# ================================
# 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
# ================================
@router.callback_query(lambda cb: cb.data and cb.data.startswith("reg:"), RegStates.role)
async def process_role(cb: types.CallbackQuery, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–±—É–µ–º—ã—Ö –ø–æ–ª–µ–π.
    –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—É.
    –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è.
    """
    role = cb.data.split(":", 1)[1]
    await state.update_data(role=role)

    if role == "student":
        # –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        text = escape_for_telegram(
            "*–ü–æ–ª—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:*\n"
            "‚Ä¢ –≥—Ä—É–ø–ø–∞\n"
            "‚Ä¢ –ø–æ–¥–≥—Ä—É–ø–ø–∞\n"
            "‚Ä¢ _–∏–º—è_\n"
            "‚Ä¢ _—Ñ–∞–º–∏–ª–∏—è_\n"
            "\n"
            "\"_–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è_\""
        )
        await cb.message.edit_text(text, parse_mode=ParseMode.MARKDOWN)

        # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
        rows = await database.get_groups(database.users_db_file)
        kb = InlineKeyboardBuilder()
        for gid, faculty, name in rows:
            kb.button(text=f"{name}", callback_data=f"grp_id:{gid}|grp_name:{name}")
        kb.adjust(4)
        await cb.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=kb.as_markup()
        )
        await state.set_state(RegStates.group_select)

    else:
        # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        text = escape_for_telegram(
            "*–ü–æ–ª—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:*\n"
            "‚Ä¢ —Ñ–∞–º–∏–ª–∏—è\n"
            "‚Ä¢ _–∏–º—è_\n"
            "\n"
            "\"_–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è_\""
        )
        await cb.message.edit_text(text, parse_mode=ParseMode.MARKDOWN)
        kb = InlineKeyboardBuilder()
        kb.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip:name")
        kb.adjust(1)
        await cb.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ *–∏–º—è* (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", parse_mode=ParseMode.MARKDOWN,
            reply_markup=kb.as_markup()
        )
        await state.set_state(RegStates.t_first_name)


# ================================
# 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏ –≤—ã–±–æ—Ä –ø–æ–¥–≥—Ä—É–ø–ø—ã
# ================================
@router.callback_query(lambda cb: cb.data.startswith("grp_id:"), RegStates.group_select)
async def process_group_select(cb: types.CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º group_id –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥–≥—Ä—É–ø–ø—ã"""
    data = cb.data.split("|", 2)
    gid = int(data[0].split(":", 1)[1])
    gname = data[1].split(":", 1)[1]
    await state.update_data(group_id=gid)

    kb = InlineKeyboardBuilder()
    kb.button(text="1Ô∏è‚É£", callback_data="sub:1")
    kb.button(text="2Ô∏è‚É£", callback_data="sub:2")
    kb.adjust(2)

    await cb.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ *{gname}* _(ID={gid})_", parse_mode=ParseMode.MARKDOWN
    )
    await cb.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ *–ø–æ–¥–≥—Ä—É–ø–ø—É*:", parse_mode=ParseMode.MARKDOWN,
        reply_markup=kb.as_markup()
    )
    await state.set_state(RegStates.subgroup)


# ================================
# 5. –í—ã–±–æ—Ä –ø–æ–¥–≥—Ä—É–ø–ø—ã –∏ –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
# ================================
@router.callback_query(lambda cb: cb.data.startswith("sub:"), RegStates.subgroup)
async def process_subgroup(cb: types.CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–≥—Ä—É–ø–ø—É –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è"""
    sub = int(cb.data.split(":", 1)[1])
    await state.update_data(subgroup=sub)

    kb = InlineKeyboardBuilder()
    kb.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip:fname")
    kb.adjust(1)

    await cb.message.edit_text(
        f"–ü–æ–¥–≥—Ä—É–ø–ø–∞: *{sub}*", parse_mode=ParseMode.MARKDOWN
    )
    await cb.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ *–∏–º—è*:", parse_mode=ParseMode.MARKDOWN,
        reply_markup=kb.as_markup()
    )
    await state.set_state(RegStates.first_name)


# ================================
# 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
# ================================
@router.callback_query(lambda cb: cb.data == "skip:fname", RegStates.first_name)
async def skip_fname(cb: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    await state.update_data(first_name=None)

    kb = InlineKeyboardBuilder()
    kb.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip:lname")
    kb.adjust(1)

    await cb.message.edit_text(
        escape_for_telegram("–ò–º—è –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
    )
    await cb.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ *—Ñ–∞–º–∏–ª–∏—é*:", parse_mode=ParseMode.MARKDOWN,
        reply_markup=kb.as_markup()
    )
    await state.set_state(RegStates.last_name)


@router.message(RegStates.first_name)
async def input_fname(message: types.Message, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∏–º—è"""
    await state.update_data(first_name=message.text.strip())
    await message.answer(
        f"–ò–º—è: *{message.text.strip()}*", parse_mode=ParseMode.MARKDOWN
    )

    kb = InlineKeyboardBuilder()
    kb.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip:lname")
    kb.adjust(1)

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ *—Ñ–∞–º–∏–ª–∏—é* (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", parse_mode=ParseMode.MARKDOWN,
        reply_markup=kb.as_markup()
    )
    await state.set_state(RegStates.last_name)


# ================================
# 7. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
# ================================

@router.callback_query(lambda cb: cb.data == "skip:lname", RegStates.last_name)
async def skip_lname(cb: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    await state.update_data(last_name=None)

    await cb.message.edit_text(
        escape_for_telegram("–§–∞–º–∏–ª–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
    )

    data = await state.get_data()
    role = data.get("role")

    if role == "student":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        await database.save_student(
            user_id=cb.from_user.id,
            group_id=data.get("group_id"),
            subgroup=data.get("subgroup"),
            first_name=data.get("first_name"),
            last_name=data.get("last_name"),
            db_path=database.users_db_file
        )
        await cb.message.answer(escape_for_telegram("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"))
    else:
        await cb.message.edit_text(escape_for_telegram("‚ùó –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ–±—è–∑–∞–Ω –≤–≤–µ—Å—Ç–∏ —Ñ–∞–º–∏–ª–∏—é."))
        return


@router.message(RegStates.last_name)
async def input_last(message: types.Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ users,
    –∞ –∑–∞—Ç–µ–º –≤ students –∏–ª–∏ teachers —á–µ—Ä–µ–∑ database
    """
    data = await state.get_data()
    role = data.get("role")
    last = message.text.strip()

    # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ users
    await database.create_user(message.from_user.id, role, database.users_db_file)

    if role == "student":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        await database.save_student(
            user_id=message.from_user.id,
            group_id=data.get("group_id"),
            subgroup=data.get("subgroup"),
            first_name=data.get("first_name"),
            last_name=last,
            db_path=database.users_db_file
        )
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        await database.save_teacher(
            user_id=message.from_user.id,
            first_name=data.get("first_name"),
            last_name=last,
            db_path=database.users_db_file
        )

    await message.answer(escape_for_telegram("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"))

    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
    await state.clear()


# ================================
# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ================================
@router.message(Command("unregister"))
async def cmd_unregister(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    user_id = message.from_user.id

    if not await database.user_exists(user_id, database.users_db_file):
        await message.answer(escape_for_telegram("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!"))
        return

    success = await database.delete_user(user_id, database.users_db_file)

    if success:
        await message.answer(escape_for_telegram("‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω!"))
    else:
        await message.answer(escape_for_telegram("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
                                                 "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!"))
